#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
import click

from gitcommit.codeparser.codeparser import CodeParser

# from gitcommit import __version__

__author__ = "Giovanni Colapinto"
__copyright__ = "Giovanni Colapinto"
__license__ = "mit"

_logger = logging.getLogger("gitcommit")


def setup_logging(loglevel):
    """Setup basic logging

    Args:
      loglevel (int): minimum loglevel for emitting messages
    """
    global _logger
    handler_console = logging.StreamHandler()
    formatter_base = logging.Formatter(
        "%(asctime)s|%(levelname)s|%(name)s|%(module)s|%(lineno)s|%(message)s"
    )
    handler_console.setFormatter(formatter_base)
    level = logging.getLevelName(loglevel)
    _logger.setLevel(level)
    _logger.addHandler(handler_console)


@click.command()
@click.argument("path")
@click.option("--log-level", default="INFO", help="Desired log level")
@click.option(
    "--remove-comments/--no-remove-comments", '-r',
    default=False,
    help="Remove gitcommit related comments from code",
)
@click.option(
    "--untracked/--no-untracked", default=False, help="Parse also untracked files"
)
@click.option("--comment", "-c", default="#", help="Comment char")
@click.option(
    "--summary",
    "-s",
    default="Autogenerated by gitcommit",
    help="Commit comment summary (it will be trunked at 50 chars)",
)
@click.option(
    "--mark", "-m", default="->", help="Chars after comment to identify gitcomment mark"
)
def main(
    path: str,
    log_level: str,
    comment: str,
    mark: str,
    remove_comments: bool,
    untracked: bool,
    summary: str,
):
    """Create git commit message from comments in code"""
    setup_logging(log_level)

    parser = CodeParser(
        path=path,
        comment=comment,
        mark=mark,
        remove_comments=remove_comments,
        untracked=untracked,
        summary=summary,
    )

    try:
        parser.run()
    except Exception as e:
        _logger.error(f"Something went wrong during code parser. Error: {e}")


if __name__ == "__main__":
    main()
